// "E:/mbrasebin/Donnees/Strasbourg/GTRU/ProjectT3/";
// "E:/temp2/";
// "E:/mbrasebin/GeOxygene/simplu3d/simplu3D/src/main/resources/scenario/building_parameters_project_expthese_temp.xml";
val idBPU = 255
val distReculVoirie = Val[Double]
val distReculFond = Val[Double]
val distReculLat = Val[Double]
val maximalCES = Val[Double]
val hIniRoad = Val[Double]
val slopeRoad = Val[Double]
val hauteurMax = Val[Double]
val run = Val[Int]

val rangeReculVoirie = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeReculFond = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeReculLat = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeMaxCES = (0.9 to 1.0 by 0.1) // (0.1 to 1.0 by 0.1)
val rangeHIniRoad = (9.0 to 10.0 by 1) // (0.0 to 5.0 by 0.5)
val rangeSlope = (2.5 to 3.0 by 0.5) // (0.0 to 3.0 by 0.5)
val rangeHMax = (19.0 to 20.0 by 1.0) // (10.0 to 20.0 by 1.0)

val explo = ExplorationTask(
 (distReculVoirie in rangeReculVoirie) x
  (distReculFond in rangeReculFond) x
  (distReculLat in rangeReculLat) x
  (maximalCES in rangeMaxCES) x
  (hIniRoad in rangeHIniRoad) x
  (slopeRoad in rangeSlope) x
  (hauteurMax in rangeHMax) x
  (seed in UniformDistribution[Long](42) take 100)
  )

// Function signature : 
//  run(String folder, String folderOut, String parameterFile, int idBPU, double distReculVoirie,
// 			double distReculFond, double distReculLat, double maximalCES, double hIniRoad, double slopeRoad,
// 			double hauteurMax, int run) 
val javaTask = ScalaTask("RunTask.run(" 
+ """"E:/mbrasebin/Donnees/Strasbourg/GTRU/ProjectT3/""""
+","
+""""E:/temp2/""""
+","
+ """"E:/mbrasebin/GeOxygene/simplu3d/simplu3D/src/main/resources/scenario/building_parameters_project_expthese_temp.xml""""
+ ", idBPU,distReculVoirie, distReculFond, distReculLat, maximalCES, hIniRoad, slopeRoad, hauteurMax, run )") set (
//  libraries += workDirectory /"simplu3d-openmole-plugin_2.11-1.0.jar",
  imports += "fr.ign.cogit.simplu3d.openmole._",
  inputs += ( idBPU,distReculVoirie, distReculFond, distReculLat, maximalCES, hIniRoad, slopeRoad, hauteurMax, run )
)

val seedExploration = ExplorationTask((seed in UniformDistribution[Long](42) take 100))

val model =
  ScalaTask("""
    |
    |""".stripMar gin) set (
    imports += "fr.ign.cogit.simplu3d.openmole._",
    inputs += seed
    outputs +=
  )

val copyHook = CopyFileHook(shape, outputDir + "shape_${temperature}_${temperatureDecrease}_${seed}/")
val csvHook = AppendToCSVFileHook(outputDir + "energy.csv", temperature, temperatureDecrease, seed, energy)

seedExploration -< (Strain(model) on env hook csvHook hook copyHook)
