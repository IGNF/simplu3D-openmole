val inputFolder = Val[File]
val outputFolder = Val[File]

val idBPU = 255
val distReculVoirie = Val[Double]
val distReculFond = Val[Double]
val distReculLat = Val[Double]
val maximalCES = Val[Double]
val hIniRoad = Val[Double]
val slopeRoad = Val[Double]
val hauteurMax = Val[Double]
val seed = Val[Long]

val rangeReculVoirie = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeReculFond = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeReculLat = (0.0 to 0.5 by 0.5) // (0.0 to 5.0 by 0.5)
val rangeMaxCES = (0.9 to 1.0 by 0.1) // (0.1 to 1.0 by 0.1)
val rangeHIniRoad = (9.0 to 10.0 by 1) // (0.0 to 5.0 by 0.5)
val rangeSlope = (2.5 to 3.0 by 0.5) // (0.0 to 3.0 by 0.5)
val rangeHMax = (19.0 to 20.0 by 1.0) // (10.0 to 20.0 by 1.0)

val explo = ExplorationTask(
  (distReculVoirie in rangeReculVoirie) x
  (distReculFond in rangeReculFond) x
  (distReculLat in rangeReculLat) x
  (maximalCES in rangeMaxCES) x
  (hIniRoad in rangeHIniRoad) x
  (slopeRoad in rangeSlope) x
  (hauteurMax in rangeHMax) x
  (seed in UniformDistribution[Long](42) take 10)
)

val seedExploration = ExplorationTask((seed in UniformDistribution[Long](42) take 10))

val model =
  ScalaTask("""
    |new File(\"/tmp/data_out\").mkdir()
    |val res = RunTask.run(inputFolder, new File(\"/tmp/data_out\"), paramFile, idBPU, distReculVoirie, distReculFond, distReculLat, maximalCES, hIniRoad, slopeRoad, hauteurMax, seed)
    |val energy = res.energy
    |val coverageRatio = res.coverageRatio
    |val signature = res.signature
    |""".stripMargin) set (
    imports += "java.io.File",
    imports += "fr.ign.cogit.simplu3d.openmole._",
    inputs += (inputFolder, paramFile, idBPU, distReculVoirie, distReculFond, distReculLat, maximalCES, hIniRoad, slopeRoad, hauteurMax, seed),
    outputs += (energy, coverageRatio, signature),

    inputFiles += (input, "/tmp/data_in"),
    outputFiles += ("/tmp/data_out", outputFolder),

    inputFolder := workDirectory / "data",
    paramFile := workDirectory / "building_parameters_project_expthese_temp.xml"
  )

val copyHook = CopyFileHook(outputFolder, workDirectory / "results/shape_${seed}_${energy}_${coverageRatio}_${signature}/")
val csvHook = AppendToCSVFileHook(workDirectory / "results/energy.csv", seed, energy, coverageRatio, signature)

explo -< (Strain(model) hook csvHook hook copyHook)
